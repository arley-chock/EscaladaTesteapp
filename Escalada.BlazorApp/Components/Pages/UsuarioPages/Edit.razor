@page "/Usuarios/edit"

@using Microsoft.EntityFrameworkCore
@using Escalada.API.Model
@inject NavigationManager NavigationManager
@inject UsuarioService usuarioservice

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Usuario</h4>
<hr />
@if (Usuario is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Usuario" OnValidSubmit="UpdateUsuario" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Usuario.Id" value="@Usuario.Id" />
                <div class="mb-3">
                    <label for="nome" class="form-label">Nome:</label>
                    <InputText id="nome" @bind-Value="Usuario.Nome" class="form-control" />
                    <ValidationMessage For="() => Usuario.Nome" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="Sobrennome" class="form-label">Sobrenome:</label>
                    <InputText id="Sobrenome" @bind-Value="Usuario.Sobrenome" class="form-control" />
                    <ValidationMessage For="() => Usuario.Sobrenome" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Usuario.Email" class="form-control" />
                    <ValidationMessage For="() => Usuario.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="telefone" class="form-label">Telefone:</label>
                    <InputText id="telefone" @bind-Value="Usuario.Telefone" class="form-control" />
                    <ValidationMessage For="() => Usuario.Telefone" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/usuarios">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Usuario? Usuario { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Usuario ??= await usuarioservice.GetUsuarioByIdAsync(Id);

            if (Usuario is null)
            {
                NavigationManager.NavigateTo("notfound");
            }
        }
        catch (Exception ex)
        {
          
            NavigationManager.NavigateTo("error");
        }
    }

  
    public async Task UpdateUsuario()
    {
        try
        {
            if (Usuario != null)
            {
                var success = await usuarioservice.UpdateUsuarioAsync(Usuario);

                if (!success)
                {
                    NavigationManager.NavigateTo("error");
                    return;
                }
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!await UsuarioExists(Usuario!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/usuarios");
    }

    private async Task<bool> UsuarioExists(int id)
    {
        try
        {
            var usuario = await usuarioservice.GetUsuarioByIdAsync(id);
            return usuario != null;
        }
        catch (Exception)
        {
            return false;
        }
    }
}